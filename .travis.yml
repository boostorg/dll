# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Antony Polukhin 2014-2015.

#
# See https://svn.boost.org/trac/boost/wiki/TravisCoverals for description of this file
# and how it can be used with Boost libraries.
#
# File revision #3

language: cpp
compiler:
    - gcc
#    - clang

os:
    - linux
#    - osx

osx_image: xcode61

env:
    global:
        # Autodetect Boost branch by using the following code: - BRANCH_TO_TEST=`git rev-parse --abbrev-ref HEAD`
        # or by - BRANCH_TO_TEST=$TRAVIS_BRANCH or just directly specify it
        - BRANCH_TO_TEST=$TRAVIS_BRANCH

        # Files, which coverage results must be ignored (files from other projects).
        # Example: - IGNORE_COVERAGE='*/boost/progress.hpp */filesystem/src/*'
        - IGNORE_COVERAGE='*/detail/pe_info.hpp */detail/macho_info.hpp	*/boost/progress.hpp */filesystem/src/*'

        # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
        # via the "travis encrypt" command using the project repo's public key.
        #
        # You can get it from "Configure TravisCI" on your Coverity project page
        - secure: "WJQ9X51EmtIKOe7LTAKsGx/RTq60ENxSRdTvoJ2MWMHzD0+8mW32Qki60zXBaOrKuNAa0rBWj1dVIgKBxpQdWHJgSdZbBJzQ+ZLUVHB1fFMp/P8IITywceTdBw2WMqWML8pBpcXM/+mQXr+xjAVDDxcQ+7f7HKna4T7S3daN5x4="

    matrix:
        - CXX_STANDARD=c++98
        - CXX_STANDARD=c++0x

addons:
  coverity_scan:
    # Mail to send notification to
    notification_email: antoshkka@gmail.com

    # This specifies the branch pattern for Coverity tests. If git branch and pattern mismatch, 
    # then coverity won't run. Set to `branch_pattern: $TRAVIS_BRANCH` if you want to do analisis on each build.
    #branch_pattern: disable_coverity_scan
    branch_pattern: $TRAVIS_BRANCH

###############################################################################################################
# From this point and below code is same for all the Boost libs
###############################################################################################################
    build_command_prepend: "echo $COV_BUILD_OPTIONS $COVERITY_SCAN_BUILD_COMMAND"
    build_command:   "../../../b2 cxxflags=--coverage\ -std=$CXX_STANDARD linkflags=--coverage "
    project:
      name: "$TRAVIS_REPO_SLUG"
      description: "Build submitted via Travis CI"


before_install:
    # Set this to the name of the library
    - PROJECT_TO_TEST=`basename $TRAVIS_BUILD_DIR`
    - echo "Testing $PROJECT_TO_TEST"
    # Cloning Boost libraries (fast nondeep cloning)
    - BOOST=$HOME/boost-local
    - git init $BOOST
    - cd $BOOST
    - git remote add --no-tags -t $BRANCH_TO_TEST origin https://github.com/boostorg/boost.git
    - git fetch --depth=1
    - git checkout $BRANCH_TO_TEST
    - git submodule update --init --merge
    - git remote set-branches --add origin $BRANCH_TO_TEST
    - git pull --recurse-submodules
    - git submodule update --init
    - git checkout $BRANCH_TO_TEST
    - git submodule foreach "git reset --quiet --hard; git clean -fxd"
    - git reset --hard; git clean -fxd
    - git status
    - rm -rf $BOOST/libs/dll
    - rm -rf $BOOST/libs/$PROJECT_TO_TEST
    - mv $TRAVIS_BUILD_DIR/../$PROJECT_TO_TEST/ $BOOST/libs/$PROJECT_TO_TEST
    - TRAVIS_BUILD_DIR=$BOOST/libs/$PROJECT_TO_TEST
    - ./bootstrap.sh
    - ./b2 headers
    - cd $BOOST/libs/$PROJECT_TO_TEST/test/

script:
    # `--coverage` flags required to generate coverage info for Coveralls
    - ../../../b2 testing.launcher=valgrind address-model=64 architecture=x86 cxxflags="--coverage -std=$CXX_STANDARD" linkflags="--coverage"

after_success:
    # Copying Coveralls data to a separate folder
    - mkdir -p $TRAVIS_BUILD_DIR/coverals
    - find ../../../bin.v2/ -name "*.gcda" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
    - find ../../../bin.v2/ -name "*.gcno" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;

    # Preparing Coveralls data by
    # ... installing the tools
    - sudo apt-get install -qq python-yaml lcov
    # ... changind data format to a readable one
    - lcov --directory $TRAVIS_BUILD_DIR/coverals --base-directory ./ --capture --output-file $TRAVIS_BUILD_DIR/coverals/coverage.info

    # ... erasing /test/ /example/ folder data
    - cd $BOOST
    - lcov --remove $TRAVIS_BUILD_DIR/coverals/coverage.info "/usr*" "*/$PROJECT_TO_TEST/test/*" $IGNORE_COVERAGE "*/$PROJECT_TO_TEST/tests/*" "*/$PROJECT_TO_TEST/examples/*" "*/$PROJECT_TO_TEST/example/*" -o $TRAVIS_BUILD_DIR/coverals/coverage.info

    # ... erasing data that is not related to this project directly
    - OTHER_LIBS=`grep "submodule .*" .gitmodules | sed 's/\[submodule\ "\(.*\)"\]/"\*\/boost\/\1\.hpp" "\*\/boost\/\1\/\*"/g'| sed "/\"\*\/boost\/$PROJECT_TO_TEST\/\*\"/d" | sed ':a;N;$!ba;s/\n/ /g'`
    - echo $OTHER_LIBS
    - eval "lcov --remove $TRAVIS_BUILD_DIR/coverals/coverage.info $OTHER_LIBS -o $TRAVIS_BUILD_DIR/coverals/coverage.info"

    # Sending data to Coveralls
    - cd $TRAVIS_BUILD_DIR
    - gem install coveralls-lcov
    - coveralls-lcov coverals/coverage.info
